/**
 ****************************************************************************************
 *
 * @file prf_utils.c
 *
 * @brief Implementation of Profile Utilities
 *
 * Copyright (C) RivieraWaves 2009-2012
 *
 * $Rev: $
 *
 ****************************************************************************************
 */


/**
 ****************************************************************************************
 * @addtogroup PRF_UTILS
 * @{
 ****************************************************************************************
 */

/*
 * INCLUDE FILES
 ****************************************************************************************
 */
#include "app_config.h"

#if (BLE_ATTS)

#include <stdint.h>
#include <stdbool.h>
#include "ke_task.h"
#include "co_error.h"
#include "atts_util.h"
#include "gatt_task.h"
#include "prf_utils.h"
#include "ke_mem.h"

#if (BLE_DOKI_DEVICE)
#include "doki.h"
#include "doki_task.h"
#endif

#endif /* (BLE_ATTS) */
/*
 * LOCAL FUNCTIONS DEFINITIONS
 ****************************************************************************************
 */


/*
 * EXPORTED FUNCTIONS DEFINITIONS
 ****************************************************************************************
 */
#if (BLE_ATTS)

void prf_server_error_ind_send(prf_env_struct *p_env, uint8_t status,
                               ke_msg_id_t ind_msg_id, ke_msg_id_t msg_id)
{
    struct prf_server_error_ind *ind = KE_MSG_ALLOC(ind_msg_id,
                                                    p_env->con_info.appid, p_env->con_info.prf_id,
                                                    prf_server_error_ind);

    ind->conhdl    = p_env->con_info.conhdl;
    ind->status    = status;
    ind->msg_id    = msg_id;

    // send the message
    ke_msg_send(ind);
}

#endif //(BLE_ATTS)
#if (BLE_ATTS)

uint8_t prf_pack_date_time(uint8_t *packed_date, const struct prf_date_time* date_time)
{
    co_write16p(packed_date, date_time->year);
    *(packed_date + 2) = date_time->month;
    *(packed_date + 3) = date_time->day;
    *(packed_date + 4) = date_time->hour;
    *(packed_date + 5) = date_time->min;
    *(packed_date + 6) = date_time->sec;

    return 7;
}
uint8_t prf_unpack_date_time(uint8_t *packed_date, struct prf_date_time* date_time)
{
    date_time->year = co_read16p(&(packed_date[0]));
    date_time->month = packed_date[2];
    date_time->day   = packed_date[3];
    date_time->hour  = packed_date[4];
    date_time->min   = packed_date[5];
    date_time->sec   = packed_date[6];

    return 7;
}

void prf_dispatch_disconnect(uint8_t status, uint8_t reason, uint16_t conhdl, uint8_t idx)
{
    //All profiles get this event, they must disable clean
    #if (BLE_DOKI_DEVICE)
    if (ke_state_get(TASK_DOKI) == DOKI_CONNECTED)
    {
        gap_send_discon_cmp_evt(status, reason, conhdl, TASK_DOKI);
    }
    #endif // #if BLE_DOKI_DEVICE
}

void prf_init(void)
{
#if (BLE_DOKI_DEVICE)
    doki_prf_init();
#endif

    struct gap_env_tag *gap_env = (struct gap_env_tag*)(_gap_env);
    gap_env->conn_rec.own_addr_type = QN_ADDR_TYPE;
}

#endif /* (BLE_ATTS) */

/// @} PRF_UTILS

