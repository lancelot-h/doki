/**
 ****************************************************************************************
 *
 * @file app_env.c
 *
 * @brief Application C file
 *
 * Copyright(C) 2015 NXP Semiconductors N.V.
 * All rights reserved.
 *
 * $Rev: 1.0 $
 *
 ****************************************************************************************
 */

/**
 ****************************************************************************************
 * @addtogroup APP
 * @{
 ****************************************************************************************
 */


/*
 * INCLUDE FILES
 ****************************************************************************************
 */
#include "app_env.h"

/*
 * GLOBAL VARIABLE DEFINITIONS
 ****************************************************************************************
 */
struct app_env_tag app_env;

/*
 ****************************************************************************************
 * @brief Initiate the proximity reporter enviroment - at initiation   *//**
 * @description
 * Initiate the proximity reporter enviroment - at initiation.
 ****************************************************************************************
 */
static void app_gap_init(void)
{  
    // Set White List to NVDS, TODO

#if (BLE_PERIPHERAL)
    // Initialize Advertising data
    app_set_adv_data(GAP_GEN_DISCOVERABLE);
    // Initialize Scan Response data
    app_set_scan_rsp_data(0);
#endif
}

#define TK_LEN        6
#if (QN_SECURITY_ON)
static void app_smp_init(void)
{
#if !QN_WORK_MODE
    nvds_tag_len_t length = 0;
    
    // Get the stored TK type from NVDS
    length = 1;
    if (NVDS_OK != nvds_get(NVDS_TAG_TK_TYPE, &length, (uint8_t *)&app_env.tk_type))
    {
        // Fix TK used
        app_env.tk_type = 0;
    }
    // Get the stored TK from NVDS
    if (app_env.tk_type == 0)
    {
        length = TK_LEN;
        if (NVDS_OK != nvds_get(NVDS_TAG_TK_KEY, &length, app_env.tk))
            memcpy(app_env.tk, QN_SMP_TK, TK_LEN);
    }
    // Get the stored IRK from NVDS
    length = KEY_LEN;
    if (NVDS_OK != nvds_get(NVDS_TAG_IRK_KEY, &length, app_env.irk))
        memcpy(app_env.irk, QN_SMP_IRK, KEY_LEN);
    // Get the stored CSRK from NVDS
#if (QN_CSRK_SUPPORT)
    length = KEY_LEN;
    if (NVDS_OK != nvds_get(NVDS_TAG_CSRK_KEY, &length, app_env.csrk))
        memcpy(app_env.csrk, QN_SMP_CSRK, KEY_LEN);
#endif
    // Get the stored LTK from NVDS
    length = KEY_LEN;
    if (NVDS_OK != nvds_get(NVDS_TAG_LTK_KEY, &length, app_env.ltk))
        memcpy(app_env.ltk, QN_SMP_LTK, KEY_LEN);
    // Get the paired device information
    length = 1;
    if (NVDS_OK != nvds_get(APP_NVDS_DB_COUNT_TAG, &length, &app_env.bonded_count))
    {
        app_env.bonded_count = 0;
    }
    length = sizeof(struct app_bonded_info);
    for (uint8_t i = 0; i < app_env.bonded_count; i++)
    {
        if (NVDS_OK != nvds_get(APP_NVDS_DB_START_TAG + i, &length, (uint8_t *)(app_env.bonded_info + i)))
        {
            app_env.bonded_count = i;
            break;
        }
    }
#else
    // Fix TK not used
    app_env.tk_type = 1; 
    // Use default TK
    memcpy(app_env.tk, QN_SMP_TK, TK_LEN);
    // Use default IRK
    memcpy(app_env.irk, QN_SMP_IRK, KEY_LEN);
    // Use default CSRK
#if (QN_CSRK_SUPPORT)
    memcpy(app_env.csrk, QN_SMP_CSRK, KEY_LEN);
#endif
    // Use default LTK
    memcpy(app_env.ltk, QN_SMP_LTK, KEY_LEN);
#endif
    // RAND
    memcpy(app_env.rand, QN_SMP_RAND, RAND_NB_LEN);
    // EDIV
    app_env.ediv = QN_SMP_EDIV;

    // Default Security Level setting
    app_env.sec_lvl_set = QN_SEC_MODE_LEVEL;
    // Default IO Capbility setting
    app_env.iocap_set = QN_IO_CAP_ABILITY;
}
#endif

#if BLE_DOKI_DEVICE
static void app_doki_init(void)
{
    app_env.doki_ev.features = DOKI_FEATURES_SUP;
    app_env.doki_ev.conhdl = 0xFFFF;
}
#endif

static void app_env_init(void)
{
    memset(&app_env, 0, sizeof(app_env));
    for (uint8_t idx = 0; idx < BLE_CONNECTION_MAX; idx++)
    {
        app_env.dev_rec[idx].free = true;
        app_env.dev_rec[idx].conhdl = 0xFFFF;
    }
    // Set White List
    app_gap_init();
    // Set Local Keys, Security Level and IO Capbility
#if (QN_SECURITY_ON)
    app_env.bonded_info = (struct app_bonded_info *)app_env.bonded_db;
    app_smp_init();
#endif
    // Set Service setup inital value
#if (BLE_PERIPHERAL)
    app_env.srv_flag = app_get_local_service_flag();
#endif
}

/**
 ****************************************************************************************
 * @brief Initialize the application task environment.
 *
 ****************************************************************************************
 */
void app_init(void)
{
    app_env_init();

    // Register APP task into kernel
#if !QN_WORK_MODE
    task_app_desc_register();
#endif    
    ke_state_set(TASK_APP, APP_INIT);

#if BLE_DOKI_DEVICE
    app_doki_init();
#endif

#if QN_DBG_PRINT
    app_uart_init();
#endif
}

/// @} APP
